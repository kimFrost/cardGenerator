///<reference path="../mind.module.ts.ts"/>


namespace LessonsFilterModule {

    type PageDataService = LessonsFilterModule.PageDataService;

    const maxItemsLoadedDefault:Number = 12;

    export class LessonsFilterService {

        public bFetchingFilters: boolean = false;
        private data:ILessonsSearchResult;
        private dataListeners: Array<ng.IDeferred<ILessonsSearchResult>> = [];
        private maxItemsLoaded:Number = maxItemsLoadedDefault;

        public getDataRef():ILessonsSearchResult {
            return this.data;
        }
        public listenForDataChange():ng.IPromise<ILessonsSearchResult> {
             var defer = this.$q.defer();
             this.dataListeners.push(defer); 
             return defer.promise;
        }
        public resetFilters():void {
            if (this.data)
            {
                for (let filter of this.data.Facets) {
                    for (let facet of filter.Values) {
                        facet.Selected = false;
                    }                     
                }
            }
            this._getResults('', this.maxItemsLoaded, 0, []);
        }
        public update(data):void {
            this.data = data;
            for (var defer of this.dataListeners) {
                defer.notify(this.data);
            }
        }
        public loadMore():void {
            this._getResults('', this.data.TotalHits, 0, this.data.Facets);
        }
        private genFilterObject(filters:Array<ILessonsFilterFacetList>) {
            let filterObject = {};
            if (filters)
            {
                for (let filter of filters) {
                    filterObject[filter.Name] = [];
                    for (let facet of filter.Values) {
                        if (facet.Selected) {
                            filterObject[filter.Name].push(facet.Key);
                        }
                    }
                    if (!filterObject[filter.Name].length) {
                        delete filterObject[filter.Name];
                    }
                }
            }
            return filterObject;
        }
        public getResults():ng.IPromise<ILessonsSearchResult>  {
            return this._getResults('', this.maxItemsLoaded, 0, this.data.Facets);
        }
        private _getResults(query:string, pageSize:Number, skip:Number, filters:Array<ILessonsFilterFacetList>):ng.IPromise<ILessonsSearchResult> {
            var defer = this.$q.defer();
            this.$http({
				method: 'POST',
				url: '/en-us/scom/services/Search/LessonSearchService.ashx/search',
				data: {
                    Query: query,
                    PageSize:pageSize,
                    Skip: skip,
                    Filters: this.genFilterObject(filters)
                }
			}).then((response) => {
                this.update(response.data as ILessonsSearchResult);
				defer.resolve(response.data as ILessonsSearchResult);
			}, (err) => {
				console.warn("ERROR: ", err);
				defer.reject();
			});
            return defer.promise;
        }

        constructor(
            private $rootScope: ng.IRootScopeService,
            private $q: ng.IQService,
            private $location: ng.ILocationService,
            protected $http: ng.IHttpService,
            private $httpParamSerializer: ng.IHttpParamSerializer,
            private $timeout: ng.ITimeoutService,
            private pageDataService: PageDataService
        ) {
            let pageData = pageDataService.getPageData();
            if (pageData) {
                this.maxItemsLoaded = pageData.SearchResult.PageSize;
                this.update(pageData.SearchResult);
            }
        }
    }

    define(["bootstrap"], function () {
        return function (app) {
            app.service("lessonsFilterService", LessonsFilterService);
        }
    });

}